{"version":3,"sources":["app_components/weather_design.js","app_components/forecastweekly.js","App.js","serviceWorker.js","index.js"],"names":["Weather","props","dataAvailable","className","cityname","temp_celsius","hum","feels","min","max","maxminTemp","temp_min","temp_max","description","charAt","toUpperCase","slice","ForecastWeekly","forecastWeekly","scope","daily","map","record","key","dt","Date","toLocaleDateString","weekday","temp","day","humidity","feels_like","weather","wind_speed","API_KEY","SinglePageComponent","useState","country","setCountry","city","setCity","setDataAvailable","cityName","setCityName","tempC","setTempC","tempMinC","setTempMinC","tempMaxC","setTempMaxC","setDescription","setHum","setFeels","setDaily","setForecastWeekly","useEffect","getWeather","a","fetch","api_call","json","data","name","sys","main","lat","coord","lon","console","log","one_api_call","one_data","Swal","fire","position","icon","title","text","showConfirmButton","timer","value","onChange","val","selectCountry","selectRegion","onClick","e","preventDefault","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.79d28e5f.chunk.js","sourcesContent":["\nimport React from \"react\";\nimport \"./weather_design.style.css\";\nconst maxminTemp = (min, max) => {\n    if (max && min) {\n        return (\n            <h3>\n                <span className=\"px-4\">Min Temp: {min}&deg;</span>\n                <span className=\"px-4\">Max Temp: {max}&deg;</span>\n            </h3>\n        );\n    }\n}\nconst Weather = (props) => {\n    return (\n        <div>\n\n            {props.dataAvailable ?\n\n                (<div className=\"container\">\n                    <div className=\"Card\">\n                        <h1 className=\"py-3\">{props.cityname}</h1>\n\n                        <h1 className=\"py-2\">Temperature: {props.temp_celsius}&deg;</h1>\n\n                        <h1 className=\"py-2\">Humidity: {props.hum}&#37;</h1>\n\n                        <h1 className=\"py-2\">Feels Like: {props.feels}&deg;</h1>\n\n                        {maxminTemp(props.temp_min, props.temp_max)}\n\n                        <h4 className=\"py-3\">\n                            Status: {props.description.charAt(0).toUpperCase() +\n                                props.description.slice(1)}\n                        </h4>\n\n                    </div>\n                </div>)\n                : null}\n        </div>\n\n\n    );\n};\n\nexport default Weather;","\nimport React from 'react';\n\nconst ForecastWeekly = (props) => {\n    //console.log(typeof(props.daily))\n\n    return (\n        <div>\n            {props.forecastWeekly ?\n                (\n                    <div>\n                        <br></br>\n\n                        <h1>Weather forecast for next 7 days</h1>\n                        <table className=\"table table-bordered table-dark\">\n                            <thead>\n                                <tr>\n                                    <th scope=\"col\">Date</th>\n                                    <th scope=\"col\">Day</th>\n                                    <th scope=\"col\">Temperature</th>\n                                    <th scope=\"col\">Humidity</th>\n                                    <th scope=\"col\">Feels like</th>\n                                    <th scope=\"col\">Status</th>\n                                    <th scope=\"col\">Wind Speed (metre/sec)</th>\n                                </tr>\n                            </thead>\n                            <tbody>\n                                { \n                                    props.daily.map(record => {\n                                        return (\n                                            <tr key={record.dt}>\n                                                <td>{new Date(record.dt * 1000).toLocaleDateString(\"en-US\")}</td>\n                                                <td>{new Date(record.dt * 1000).toLocaleDateString(\"en-US\", { weekday: \"long\" })}</td>\n                                                <td>{record.temp.day}&deg;</td>\n                                                <td>{record.humidity}&#37;</td>\n                                                <td>{record.feels_like.day}&deg;</td>\n                                                <td>{record.weather[0].description.charAt(0).toUpperCase() +\n                                                    record.weather[0].description.slice(1)}</td>\n                                                <td>{record.wind_speed}</td>\n                                            </tr>\n                                        )\n                                    })\n                                }\n                            </tbody>\n                        </table>\n                    </div>)\n\n                : null}\n        </div>\n    );\n};\n\nexport default ForecastWeekly;","import React, { useEffect, useState } from 'react';\nimport Swal from \"sweetalert2\";\nimport './App.css';\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { CountryDropdown, RegionDropdown, CountryRegionData } from 'react-country-region-selector';\nimport Weather from './app_components/weather_design'\nimport ForecastWeekly from './app_components/forecastweekly'\nconst API_KEY = \"9a9428d179fad71739964aa74141be9c\";\n\n\nconst SinglePageComponent = () => {\n\n  const [country, setCountry] = useState(\"\")\n  const [city, setCity] = useState(\"\")\n\n  const [dataAvailable, setDataAvailable] = useState(false)\n  const [cityName, setCityName] = useState(\"\")\n  const [tempC, setTempC] = useState(\"\")\n  const [tempMinC, setTempMinC] = useState(\"\")\n  const [tempMaxC, setTempMaxC] = useState(\"\")\n  const [description, setDescription] = useState(\"\")\n  const [hum, setHum] = useState(\"\")\n  const [feels, setFeels] = useState(\"\")\n\n\n\n\n  const [daily, setDaily] = useState([])\n  const [forecastWeekly, setForecastWeekly] = useState(false)\n\n  useEffect(() => {\n    // if (\"geolocation\" in navigator) {\n    //   console.log(\"Available\")\n    //   navigator.geolocation.getCurrentPosition((position) => {\n    //     console.log(\"Latitude is :\", position.coords.latitude)\n    //     console.log(\"Longitude is :\", position.coords.longitude)\n    //   })\n    // } else {\n    //   console.log(\"Not Available\")\n    // }\n\n  }, [])\n\n  const selectCountry = (val) => {\n    setCountry(val)\n  }\n\n  const selectRegion = (val) => {\n    setCity(val)\n  }\n\n\n  const getWeather = async () => {\n    //const city = 'Chicago'\n    // const country = 'US'\n\n    //console.log(city,country)\n\n    if (!(city==\"\" || country==\"\")) {\n      const api_call = await fetch(`https://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_KEY}&units=metric`);\n      const data = await api_call.json()\n      //console.log(typeof (data.coord.lat))\n\n\n\n      setDataAvailable(true)\n      setCityName(`${data.name}, ${data.sys.country}`)\n      setTempC(data.main.temp)\n      setTempMinC(data.main.temp_min)\n      setTempMaxC(data.main.temp_max)\n      setDescription(data.weather[0].description)\n      setHum(data.main.humidity)\n      setFeels(data.main.feels_like)\n\n      let lat = data.coord.lat\n      let lon = data.coord.lon\n\n      console.log(lat)\n\n\n      //const one_api_call = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=${lat}&lon=${lon}&\n      //exclude=minutely&appid=${API_KEY}&units=metric`)\n\n      const one_api_call = await fetch(`https://api.openweathermap.org/data/2.5/onecall?lat=22.5&lon=91.5&\n    exclude=minutely&appid=${API_KEY}&units=metric`)\n\n      const one_data = await one_api_call.json()\n      setDaily(one_data.daily)\n      setForecastWeekly(true)\n    }\n    else{\n      Swal.fire({\n        position: 'top-end',\n        icon: 'error',\n        title: 'Oops!!!',\n        text: 'Please select both fields',\n        showConfirmButton: false,\n        timer: 2000\n      })\n    }\n\n\n\n  }\n\n\n\n\n  return (\n    <div className=\"App\">\n      <h2>Hello From Client Side</h2>\n\n      <CountryDropdown\n        value={country}\n        onChange={(val) => selectCountry(val)} />\n      <RegionDropdown\n        country={country}\n        value={city}\n        onChange={(val) => selectRegion(val)} />\n      <br></br>\n      <br></br>\n      <br></br>\n\n      <button onClick={(e) => {\n        e.preventDefault()\n        getWeather()\n      }}>\n        Get current weather\n      </button>\n\n      <Weather\n        dataAvailable={dataAvailable}\n        cityname={cityName}\n        temp_celsius={tempC}\n        temp_max={tempMaxC}\n        temp_min={tempMinC}\n        description={description}\n        hum={hum}\n        feels={feels}\n      />\n\n      <ForecastWeekly\n        daily={daily}\n        forecastWeekly={forecastWeekly}\n      />\n\n\n\n\n\n    </div>\n  )\n}\n\n\nfunction App() {\n  return (\n    <SinglePageComponent />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}